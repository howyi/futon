type Workspace @model (queries: {get: "getWorkspace", list: "listWorkspaces"}, mutations: null, subscriptions: null) {
  id: ID!
  name: String!
#  registeredCognitoIds: [ID!]!
#  accessToken: String!
#  scope: String!
  botUserId: String!
#  botAccessToken: String!
  cache: AWSJSON!
  ranks: [Rank!]! @connection(name: "WorkspaceRanks", keyField: "workspaceId"),
}

type State @model (queries: null, mutations: { create: "createState" }, subscriptions: null) {
  id: ID!
#  cognitoId: ID!
  redirectUrl: AWSURL!
}

type Rank @model (queries: null, mutations: null, subscriptions: null) {
  id: ID!
  workspace: Workspace! @connection(name: "WorkspaceRanks", keyField: "workspaceId")
  userId: String!
  count: Int!
}

type Query {
  echo(workspaceId: String): AWSJSON @function(name: "getWorkspaceCache-${env}")
}
